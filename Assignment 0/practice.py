"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Darlene Santes, this programming assignment is my own work
and I have not provided this code to any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID: drs4423
"""


def hamming_distance(a_data, b_data):
    """
    Determine the Hamming distance between two lists of ints.

    pre: a_data is not None, b_data is not None, len(a_data) == len(b_data)
    post: return the Hamming Distance between the two lists of ints.
    Neither the parameter a_data nor b_data are altered as a result of this
    function.
    """
    distance = 0
    for i, num in enumerate(a_data):
        if num != b_data[i]:
            distance += 1
    return distance

def is_permutation(a_data, b_data):
    """
    Determine whether integer lists a_data and b_data are permutations of each
    other.

    pre: a_data is not None, b_data is not None, and both lists only contain
    integers
    post: return True if a_data is a permutation of b_data, False otherwise.
    Neither a_data nor b_data are altered as a result of this function.
    """
    # Checking frequency in a_data
    num_count_a = {}
    for num in a_data:
        if num not in num_count_a:
            num_count_a[num] = 1
        else:
            num_count_a[num] += 1

    # Checking frequency in b_data
    num_count_b = {}
    for num in b_data:
        if num not in num_count_b:
            num_count_b[num] = 1
        else:
            num_count_b[num] += 1

    return num_count_b == num_count_a

def most_vowels(list_of_strings):
    """
    Determine the index of the string that has the largest number of vowels.
    Vowels are defined as 'A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', and 'u'.

    pre: list_of_strings is not None, len(list_of_strings) > 0, and there is at
    least 1 element in list_of_strings that is not None.
    post: return the index of the element in list_of_strings that has
    the largest number of vowel characters and is not None.
    If there is a tie, return whichever of the tied indices is closest to zero.
    The empty string, "", has zero vowels. It is possible for the maximum
    number of vowels to be 0.
    The parameter list_of_strings is not altered as a result of this function.
    """
    # Defining the variables that will be used throughout the function
    vowels = ['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u']
    max_vowels = 0
    most_vowels_index = None

    # Iterating through every string and making sure that string is valid, skipping None
    for i, string in enumerate(list_of_strings):
        vowel_count = 0
        if string is not None:
            # If string is valid, count vowels in the string
            for char in string:
                if char in vowels:
                    vowel_count += 1
            # Increasing the max value of vowels nad updating the index
            if vowel_count > max_vowels:
                max_vowels = vowel_count
                most_vowels_index = i
            # If max vowels remained the same and the index is still default (first valid string)
            # Set max index to first valid string
            elif vowel_count == max_vowels and most_vowels_index is None:
                most_vowels_index = i

    return most_vowels_index

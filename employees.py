"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Darlene Santes and <FULL NAME>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: drs4423
UT EID 2:
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    @property
    def name(self):
        """
        Returns the private name attribute
        """
        return self.__name

    @property
    def manager(self):
        """
        Returns the employee's manager, a private attribute
        """
        return self.__manager

    @property
    def performance(self):
        """
        Returns the employee's performance on a scale of 1-100
        """
        return self._performance

    @performance.setter
    def performance(self, new_performance):
        """
        Sets the employee's performance to an int between 0 and 100
        """
        if new_performance >= PERCENTAGE_MAX:
            self._performance = min(PERCENTAGE_MAX, new_performance)
        else:
            self._performance = max(PERCENTAGE_MIN, new_performance)

    @property
    def happiness(self):
        """
        Returns the employee's happiness
        """
        return self._happiness

    @happiness.setter
    def happiness(self, new_happiness):
        """
        Sets the employee's happiness to an int between 0 and 100
        """
        if new_happiness >= PERCENTAGE_MAX:
            self._happiness = min(PERCENTAGE_MAX, new_happiness)
        else:
            self._happiness = max(PERCENTAGE_MIN, new_happiness)

    @property
    def salary(self):
        """
        Returns the employee's salary
        """
        return self._salary

    @salary.setter
    def salary(self, new_salary):
        """
        Sets the employee's salary to a positive number
        """
        if new_salary < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = new_salary

    @abstractmethod
    def work(self):
        """
        Intended to simulate 1 hour of work
        """

    def interact(self, other):
        """
        Simulates an interaction between two employees
        """
        # Initializing the relationship
        if other.name not in self.relationships:
            self.relationships[other.name] = 0

        if self.relationships[other.name] >= RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self._happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        """
        Simulates the employee's daily expenses
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return f"{self.name}\n\tSalary: ${self._salary}\n\tSavings: ${self.savings}\n\t" \
                f"Happiness: {self.happiness}%\n\tPerformance: {self.performance}%"


class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        """
        Intended to simulate 1 hour of work
        """
        adjustment = random.randint(-5, 5)
        self.performance += adjustment

        if adjustment <= 0:
            for person in self.relationships:
                self.relationships[person] -= 1
            self.happiness -= 1
        else:
            self.happiness += 1



# TODO: implement this class. You may delete this comment when you are done.
class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        """
        Intended to simulate 1 hour of work
        """
        adjustment = random.randint(-15, 15)
        self.performance += adjustment
        if adjustment <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        """
        Simulates an interaction between a temp employee and another employee
        """
        super().interact(other)
        if self.manager == other:
            if other.happiness > HAPPINESS_THRESHOLD and \
                self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.salary //= 2
        if self.salary <= 0:
            self.is_employed = False


# TODO: implement this class. You may delete this comment when you are done.
class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
